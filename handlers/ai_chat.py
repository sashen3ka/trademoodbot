from aiogram import types
from firebase import db
from google.cloud import firestore
from ai_helper import get_ai_response
from intent_parser import parse_user_intent
from handlers.steps.constants import EMOTION_DETAILS


shown_prompt_users = set()  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

def format_trade(t: dict) -> str:
    asset = t.get("asset", "?")
    pnl = t.get("pnl_percent", 0)
    usd = t.get("usd_pnl", 0)
    emotion_code = t.get("emotion_code", "")
    comment = t.get("comment")

    emoji = EMOTION_DETAILS.get(emotion_code, {}).get("emoji", "")
    emotion_label = EMOTION_DETAILS.get(emotion_code, {}).get("label", "")
    emotion = f"{emoji} {emotion_label}" if emoji else emotion_code

    text = f"üìå –ê–∫—Ç–∏–≤: {asset}\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {pnl}%\nüí∞ –ü—Ä–∏–±—ã–ª—å: {usd}$"
    if emotion:
        text += f"\nüß† –≠–º–æ—Ü–∏—è: {emotion}"
    if comment:
        text += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ¬´{comment}¬ª"
    return text


async def handle_ai_chat(message: types.Message):
    # –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ –ò–ò
    if message.from_user.id not in shown_prompt_users:
        shown_prompt_users.add(message.from_user.id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚¨Ö –ù–∞–∑–∞–¥")
        await message.answer("üß† –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–±–æ—Ä—É —Ç–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫. –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å.", reply_markup=keyboard)
        return

    if message.text.strip().lower() in ["—Å—Ç–æ–ø", "/—Å—Ç–æ–ø"]:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚ûï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É", "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–û–±—Å—É–¥–∏—Ç—å —Å –ò–ò ü§ñ")
        await message.answer("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        shown_prompt_users.discard(message.from_user.id)
        return

    user_id = str(message.from_user.id)
    user_input = message.text.strip()

    intent = await parse_user_intent(user_input)
    mode = intent.get("mode", "general")

    messages = []

    if mode == "trade":
        trades_ref = db.collection("users").document(user_id).collection("trades")
        docs = trades_ref.order_by("timestamp", direction=firestore.Query.DESCENDING).limit(5).stream()
        trades = [doc.to_dict() for doc in docs if doc.exists]

        if trades:
            latest = trades[0]
            history = trades[1:]

            latest_text = format_trade(latest)
            history_lines = []
            for t in history:
                asset = t.get("asset", "?")
                pnl = t.get("pnl_percent", 0)
                usd = t.get("usd_pnl", 0)
                emotion_code = t.get("emotion_code", "")
                emotion_label = EMOTION_DETAILS.get(emotion_code, {}).get("label", emotion_code)
                history_lines.append(f"‚Äî {asset}: {pnl}%, {usd}$, {emotion_label}")

            content = f"–í–æ—Ç –º–æ—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:\n\n{latest_text}"
            if history_lines:
                content += "\n\n–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–¥–µ–ª–∫–∏:\n" + "\n".join(history_lines)

            content += f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª:\n{user_input}"

            messages = [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–æ—É—á. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–¥–µ–ª–æ–∫, "
                        "–≤—ã—è–≤–ª—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–º–æ–≥–∞—Ç—å —É–ª—É—á—à–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π. –ö–ª–∏–µ–Ω—Ç –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π, "
                        "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–ø–µ–∫—É–ª—è—Ü–∏—è–º–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.\n\n"
                        "–û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª –±—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä: —Å—Ç—Ä–æ–≥–æ, —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, markdown, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
                        "–ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö –ª–µ–∫—Ü–∏–π –∏–ª–∏ –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–± —ç—Ç–æ–º –Ω–µ –ø—Ä–æ—Å—è—Ç. –§–æ—Ä–º—É–ª–∏—Ä—É–π —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –û–≥—Ä–∞–Ω–∏—á—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞: –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç –¥–µ—Ç–∞–ª—å–Ω–µ–µ."
                    )
                },
                {"role": "user", "content": content}
            ]
        else:
            messages = [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–æ—É—á. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ, –ª–æ–≥–∏—á–Ω–æ –∏ –±–µ–∑ "
                        "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –∑–≤—ë–∑–¥–æ—á–∫–∏, markdown, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ, "
                        "–¥–µ–ª–æ–≤—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∏—Å–∫–∞–º. –û–≥—Ä–∞–Ω–∏—á—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞: –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç –¥–µ—Ç–∞–ª—å–Ω–µ–µ."
                    )
                },
                {"role": "user", "content": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n" + user_input}
            ]
    else:
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ, –ª–æ–≥–∏—á–Ω–æ –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, markdown, –∑–≤—ë–∑–¥–æ—á–∫–∏ –∏–ª–∏ "
                    "—Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É–∫—Ä–∞—à–µ–Ω–∏—è. –ì–æ–≤–æ—Ä–∏ –ø–æ –¥–µ–ª—É, –∏–∑–±–µ–≥–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –û–≥—Ä–∞–Ω–∏—á—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞: –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç –¥–µ—Ç–∞–ª—å–Ω–µ–µ."
                )
            },
            {"role": "user", "content": user_input}
        ]

    max_tokens = 500
    if any(word in user_input.lower() for word in ["–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—Ä–∞–∑–≤–µ—Ä–Ω–∏", "–¥–µ—Ç–∞–ª—å–Ω–µ–µ", "–ø–æ—è—Å–Ω–∏"]):
        max_tokens = 1200

    reply = await get_ai_response(messages, max_tokens=max_tokens)
    await message.answer(reply)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚¨Ö –ù–∞–∑–∞–¥")
    if message.from_user.id not in shown_prompt_users:
        await message.answer("–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=keyboard)
        shown_prompt_users.add(message.from_user.id)
    else:
        await message.answer("", reply_markup=keyboard)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –º–æ–∂–Ω–æ –∫–∞–∫:
# dp.register_message_handler(handle_ai_chat, state=None)  # –∏–ª–∏ –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
