from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from google.cloud import firestore
from handlers.steps.comment_step import ask_comment


class TradeStateExtended(StatesGroup):
    emotion = State()

emotions = [
    {"code": "focused_entry", "emoji": "üßò", "label": "–°–ø–æ–∫–æ–µ–Ω, —É–≤–µ—Ä–µ–Ω"},
    {"code": "doubtful_entry", "emoji": "üò∞", "label": "–í —Å–æ–º–Ω–µ–Ω–∏–∏, —Ç—Ä–µ–≤–æ–∂–Ω–æ"},
    {"code": "revenge_mode", "emoji": "üò°", "label": "–•–æ—á—É –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è"},
    {"code": "confused_entry", "emoji": "üåÄ", "label": "–ü–æ—Ç–µ—Ä—è–Ω"},
    {"code": "fomo_entry", "emoji": "üöÄ", "label": "–§–û–ú–û (–±–æ—è–ª—Å—è —É–ø—É—Å—Ç–∏—Ç—å)"},
    {"code": "overconfident", "emoji": "üòé", "label": "–°–∞–º–æ—É–≤–µ—Ä–µ–Ω"}
]



def get_emotion_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text=f"{e['emoji']} {e['label']}", callback_data=f"emotion:{e['code']}")
        for e in emotions
    ]
    kb.add(*buttons)
    return kb

async def ask_emotion(message: types.Message, state: FSMContext):
    await message.answer("üß† –ö–∞–∫–æ–µ —É —Ç–µ–±—è –±—ã–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏?", reply_markup=get_emotion_keyboard())
    await TradeStateExtended.emotion.set()

async def process_emotion(callback_query: types.CallbackQuery, state: FSMContext):
    code = callback_query.data.split(":")[1]
    await state.update_data(emotion_code=code)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    await ask_comment(callback_query.message, state)

def register_emotion_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(process_emotion, lambda c: c.data.startswith("emotion:"), state=TradeStateExtended.emotion)
