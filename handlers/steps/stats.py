from firebase import db
from aiogram import types
from datetime import datetime, timedelta
from collections import defaultdict
from handlers.steps.constants import EMOTION_DETAILS

async def show_statistics(message: types.Message):
    if message.text == "‚¨Ö –ù–∞–∑–∞–¥":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚ûï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É", "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "–û–±—Å—É–¥–∏—Ç—å —Å –ò–ò ü§ñ")
        await message.answer("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return

    user_id = str(message.from_user.id)
    text_lower = message.text.lower()

    if "1 –¥–µ–Ω—å" in text_lower:
        period_label = "1 –¥–µ–Ω—å"
        days = 1
    elif "–º–µ—Å—è—Ü" in text_lower:
        period_label = "30 –¥–Ω–µ–π"
        days = 30
    else:
        period_label = "7 –¥–Ω–µ–π"
        days = 7

    period_start = datetime.utcnow() - timedelta(days=days)

    trades_ref = db.collection("users").document(user_id).collection("trades")
    docs = trades_ref.where("timestamp", ">", period_start).stream()
    trades = [doc.to_dict() for doc in docs]

    if not trades:
        await message.answer(f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_label} —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    total_trades = len(trades)
    valid_usd = [t["usd_pnl"] for t in trades if isinstance(t.get("usd_pnl"), (int, float))]
    total_usd = round(sum(valid_usd), 2)
    total_pct = sum(t.get("pnl_percent", 0) for t in trades)
    avg_pct = round(total_pct / total_trades, 2)

    emotions = defaultdict(list)
    for t in trades:
        code = t.get("emotion_code")
        if code in EMOTION_DETAILS:
            emotions[code].append(t)

    emotion_breakdown = ""
    for code, group in emotions.items():
        count = len(group)
        total_emotion_usd = sum(t.get("usd_pnl", 0) for t in group)
        avg_emotion_usd = round(total_emotion_usd / count, 2)
        detail = EMOTION_DETAILS[code]
        label = f"{detail['emoji']} {detail['label']}"
        emotion_breakdown += f"{label} ‚Üí {avg_emotion_usd}$ ({count} —Å–¥–µ–ª–æ–∫)\n"

    text = (
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_label}</b>:\n\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>{total_trades}</b>\n"
        f"–°—Ä–µ–¥–Ω–∏–π PNL: <b>{avg_pct}%</b>\n"
        f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{total_usd}$</b>\n\n"
        f"{emotion_breakdown}"
    )

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìÖ –ó–∞ 1 –¥–µ–Ω—å", "üóì –ó–∞ 7 –¥–Ω–µ–π", "üìÜ –ó–∞ –º–µ—Å—è—Ü", "‚¨Ö –ù–∞–∑–∞–¥")

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
