from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from firebase import db
from handlers.steps.emotion_step import ask_emotion, register_emotion_handlers
from handlers.steps.comment_step import ask_comment, register_comment_handlers
from handlers.steps.stats import show_statistics


class TradeState(StatesGroup):
    asset = State()
    pnl_percent = State()
    usd_pnl = State()

def register_handlers(dp: Dispatcher):
    register_emotion_handlers(dp)
    register_comment_handlers(dp)

    @dp.message_handler(commands=["add"])
    async def start_trade(message: types.Message, state: FSMContext):
        await message.answer("üìå –í–≤–µ–¥–∏ –∞–∫—Ç–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):")
        await TradeState.asset.set()

    @dp.message_handler(state=TradeState.asset)
    async def process_asset(message: types.Message, state: FSMContext):
        await state.update_data(asset=message.text.strip())
        await message.answer("üìà –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö? (–Ω–∞–ø—Ä–∏–º–µ—Ä: +2.5, -1.2, 0.3%)")
        await TradeState.pnl_percent.set()

    @dp.message_handler(state=TradeState.pnl_percent)
    async def process_pnl(message: types.Message, state: FSMContext):
        try:
            text = message.text.strip().replace('%', '').replace(',', '.')
            pnl = float(text)
        except ValueError:
            await message.answer("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä +2.5 –∏–ª–∏ -1.2")
            return

        await state.update_data(pnl_percent=pnl)
        await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö?\n–ù–∞–ø—Ä–∏–º–µ—Ä: +80, -120")
        await TradeState.usd_pnl.set()

    @dp.message_handler(state=TradeState.usd_pnl)
    async def process_usd_pnl(message: types.Message, state: FSMContext):
        try:
            text = message.text.strip().replace(',', '.')
            usd = float(text)
        except ValueError:
            await message.answer("‚ùó –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª –≤ $: –Ω–∞–ø—Ä–∏–º–µ—Ä +100, -35, 0.")
            return

        await state.update_data(usd_pnl=usd)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏
        await ask_emotion(message, state)

    @dp.message_handler(commands=["menu"])
    async def show_main_menu(message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            types.KeyboardButton("‚ûï –í–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É"),
            types.KeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
            types.KeyboardButton("–û–±—Å—É–¥–∏—Ç—å —Å –ò–ò ü§ñ")
        ]
        keyboard.add(*buttons)
        await message.answer("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

    @dp.message_handler(lambda msg: msg.text == "‚ûï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É")
    async def start_trade_button(message: types.Message, state: FSMContext):
        await start_trade(message, state)

    @dp.message_handler(lambda msg: msg.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    async def show_stats_button(message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üìÖ –ó–∞ 1 –¥–µ–Ω—å", "üóì –ó–∞ 7 –¥–Ω–µ–π", "üìÜ –ó–∞ –º–µ—Å—è—Ü", "‚¨Ö –ù–∞–∑–∞–¥")
        await message.answer("üóìÔ∏è –í—ã–±–µ—Ä–∏ –∑–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=keyboard)

    @dp.message_handler(lambda msg: msg.text in ["üìÖ –ó–∞ 1 –¥–µ–Ω—å", "üóì –ó–∞ 7 –¥–Ω–µ–π", "üìÜ –ó–∞ –º–µ—Å—è—Ü", "‚¨Ö –ù–∞–∑–∞–¥"])
    async def handle_period_choice(message: types.Message):
        await show_statistics(message)

    @dp.message_handler(commands=["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    async def stats_handler(message: types.Message):
        await show_statistics(message)
