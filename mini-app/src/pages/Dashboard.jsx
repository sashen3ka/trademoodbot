import { useEffect, useState } from "react";
import { db } from "../firebase";
import { collection, getDocs } from "firebase/firestore";
import {
  Chart as ChartJS,
  LineElement,
  PointElement,
  CategoryScale,
  LinearScale,
  Tooltip,
  Legend,
  ArcElement,
} from "chart.js";
import { Line, Pie } from "react-chartjs-2";
import { useUserId } from "../UserContext";

ChartJS.register(LineElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend, ArcElement);

export default function Dashboard() {
  const [trades, setTrades] = useState([]);
  const userId = useUserId();

  useEffect(() => {
    const fetchTrades = async () => {
      const snap = await getDocs(collection(db, "users", userId, "trades"));
      const data = snap.docs.map((doc) => doc.data());
      setTrades(data);
    };
    fetchTrades();
  }, [userId]);

  const grouped = {};
  const emotions = {};
  let totalProfit = 0;
  let success = 0;
  let fail = 0;
  let neutral = 0;

  trades.forEach((t) => {
    const dateKey = new Date(t.timestamp).toISOString().split("T")[0];
    grouped[dateKey] = (grouped[dateKey] || 0) + (t.usd_pnl || 0);
    emotions[t.emotion_code] = (emotions[t.emotion_code] || 0) + 1;

    if ((t.pnl_percent || 0) > 0) success++;
    else if ((t.pnl_percent || 0) < 0) fail++;
    else neutral++;

    totalProfit += t.usd_pnl || 0;
  });

  const sortedDates = Object.keys(grouped).sort((a, b) => new Date(a) - new Date(b));
  const displayLabels = sortedDates.map((key) =>
    new Date(key).toLocaleDateString("ru-RU", { day: "2-digit", month: "short" })
  );

  const lineData = {
    labels: displayLabels,
    datasets: [
      {
        label: "",
        data: sortedDates.map((key) => grouped[key]),
        borderColor: "#00f7c3",
        backgroundColor: "transparent",
        tension: 0.4,
        borderWidth: 3,
        pointRadius: 2,
      },
    ],
  };

  const lineOptions = {
    responsive: true,
    plugins: {
      legend: { display: false },
    },
    scales: {
      x: {
        ticks: { color: "#9BA5B2" },
        grid: { color: "#1a1f2a" },
      },
      y: {
        ticks: { color: "#9BA5B2" },
        grid: { color: "#1a1f2a" },
      },
    },
  };

  const pieData = {
    labels: ["–£—Å–ø–µ—à–Ω—ã–µ", "–£–±—ã—Ç–æ—á–Ω—ã–µ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"],
    datasets: [
      {
        data: [success, fail, neutral],
        backgroundColor: ["#16A34A", "#DC2626", "#6B7280"],
        borderWidth: 0,
      },
    ],
  };

  const pieOptions = {
    plugins: {
      legend: { display: false },
    },
  };

  const phrases = [
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º, —á—Ç–æ–±—ã –±—ã—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—ã–º",
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ–∫, –∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
    "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–∞–∂–Ω–µ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è",
    "–û–¥–Ω–∞ —Å–¥–µ–ª–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ—à–∞–µ—Ç. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å–µ—Ä–∏—è",
    "–°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Ç–æ—Ä–≥—É–π –ø–æ –ø–ª–∞–Ω—É",
    "–ü—Ä–∏–±—ã–ª—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–¥–∞–µ—Ç—Å—è",
    "–õ—É—á—à–µ —É–ø—É—Å—Ç–∏—Ç—å —Å–¥–µ–ª–∫—É, —á–µ–º –≤–æ–π—Ç–∏ –Ω–∞ —ç–º–æ—Ü–∏—è—Ö",
    "–¢–≤–æ—è —Å–∏–ª–∞ ‚Äî –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "–ù–µ—É–¥–∞—á–∞ ‚Äî —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É",
    "–ú–µ–Ω—å—à–µ —à—É–º–∞, –±–æ–ª—å—à–µ —Å–∏—Å—Ç–µ–º—ã",
    "–°–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è ‚Äî –Ω–µ –≤—Ö–æ–¥–∏",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Å–∏–ª—å–Ω–µ–µ –∞–Ω–∞–ª–∏–∑–∞"
  ];

  const phrase = phrases[new Date().getDate() % phrases.length];

  if (trades.length === 0) {
    return (
      <div className="p-4 bg-dark text-light min-h-screen flex items-center justify-center">
        <p className="text-grayish text-center">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.</p>
      </div>
    );
  }

  return (
    <div className="p-4 bg-dark text-light min-h-screen">
      <h2 className="text-xl font-bold mb-4 text-center">üìà –ì–ª–∞–≤–Ω–∞—è</h2>

      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-sm text-grayish text-center w-full">–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –¥–Ω—è–º</h3>
          <button className="absolute right-4 top-16 bg-zinc-800 text-grayish text-xs px-3 py-1 rounded-full border border-zinc-600">–ù–µ–¥–µ–ª—è</button>
        </div>
        <Line data={lineData} options={lineOptions} />
      </div>

      <div className="mb-8 flex items-center gap-4">
        <div className="w-1/2">
          <Pie data={pieData} options={pieOptions} />
        </div>
        <div className="text-sm space-y-2">
          <div className="flex items-center gap-2">
            <span className="w-3 h-3 rounded-full bg-[#16A34A]"></span> <span className="text-grayish">–£—Å–ø–µ—à–Ω—ã–µ</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="w-3 h-3 rounded-full bg-[#DC2626]"></span> <span className="text-grayish">–£–±—ã—Ç–æ—á–Ω—ã–µ</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="w-3 h-3 rounded-full bg-[#6B7280]"></span> <span className="text-grayish">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ</span>
          </div>
        </div>
      </div>

      <div className="text-center text-grayish text-sm italic mt-8">
        {phrase}
      </div>
    </div>
  );
}
